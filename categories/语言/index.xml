<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言 on CUITPF</title>
    <link>http://localhost:1313/categories/%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 语言 on CUITPF</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2025 </copyright>
    <lastBuildDate>Mon, 30 Aug 2021 17:29:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java volatile关键字</title>
      <link>http://localhost:1313/posts/post-280/</link>
      <pubDate>Mon, 30 Aug 2021 17:29:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-280/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/%E5%B9%B6%E5%8F%91&#34;&gt;并发&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Java内存模型 
    &lt;div id=&#34;java内存模型&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Java 内存模型（JMM）是一种抽象的概念，并不真实存在，它描述了一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段、静态字段和构成数组对象的元素）的访问方式。试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。&lt;/p&gt;
&lt;p&gt;注意JMM与JVM内存区域划分的区别：&lt;/p&gt;
&lt;p&gt;JMM描述的是一组规则，围绕原子性、有序性和可见性展开；&lt;/p&gt;
&lt;p&gt;相似点：存在共享区域和私有区域&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;主内存与工作内存 
    &lt;div id=&#34;主内存与工作内存&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e4%b8%bb%e5%86%85%e5%ad%98%e4%b8%8e%e5%b7%a5%e4%bd%9c%e5%86%85%e5%ad%98&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。&lt;/p&gt;
&lt;p&gt;加入高速缓存带来了一个新的问题：缓存一致性。如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致，需要一些协议来解决这个问题。&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;image-20210830150540932&#34; src=&#34;https://img.maruifu.com/images/2021/08/30/image-20210830150540932.png&#34;&gt;

  
    &lt;figcaption&gt;image-20210830150540932&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;所有的变量都&lt;strong&gt;存储在主内存中，每个线程还有自己的工作内存&lt;/strong&gt;，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。&lt;/p&gt;
&lt;p&gt;线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;image-20210830150606986&#34; src=&#34;https://img.maruifu.com/images/2021/08/30/image-20210830150606986.png&#34;&gt;

  
    &lt;figcaption&gt;image-20210830150606986&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;数据存储类型以及操作方式 
    &lt;div id=&#34;数据存储类型以及操作方式&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ad%98%e5%82%a8%e7%b1%bb%e5%9e%8b%e4%bb%a5%e5%8f%8a%e6%93%8d%e4%bd%9c%e6%96%b9%e5%bc%8f&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;方法中的基本类型本地变量将直接存储在工作内存的栈帧结构中；&lt;/p&gt;
&lt;p&gt;引用类型的本地变量：引用存储在工作内存，实际存储在主内存；&lt;/p&gt;
&lt;p&gt;成员变量、静态变量、类信息均会被存储在主内存中；&lt;/p&gt;
&lt;p&gt;主内存共享的方式是线程各拷贝一份数据到工作内存中，操作完成后就刷新到主内存中。&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;内存间交互操作 
    &lt;div id=&#34;内存间交互操作&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%86%85%e5%ad%98%e9%97%b4%e4%ba%a4%e4%ba%92%e6%93%8d%e4%bd%9c&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>SMS--短信服务</title>
      <link>http://localhost:1313/posts/post-283/</link>
      <pubDate>Sun, 29 Aug 2021 08:20:29 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-283/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/%E5%BE%AE%E6%9C%8D%E5%8A%A1&#34;&gt;微服务&lt;/a&gt;&lt;a
  href=&#34;http://localhost:1313/tag/%E7%9F%AD%E4%BF%A1&#34;&gt;短信&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;短信服务介绍 
    &lt;div id=&#34;短信服务介绍&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e7%9f%ad%e4%bf%a1%e6%9c%8d%e5%8a%a1%e4%bb%8b%e7%bb%8d&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;短信服务（Short Message Service）是阿里云为用户提供的一种通信服务的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;产品优势：覆盖全面、高并发处理、消息堆积处理、开发管理简单、智能监控调度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产品功能：短信通知、短信验证码、推广短信、异步通知、数据统计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用场景：短信验证码、系统信息推送、推广短信等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;截屏2021-08-29 下午1.03.56&#34; src=&#34;https://img.maruifu.com/images/2021/08/29/2021-08-29-1.03.56.png&#34;&gt;

  
    &lt;figcaption&gt;截屏2021-08-29 下午1.03.56&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;短信服务使用 
    &lt;div id=&#34;短信服务使用&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e7%9f%ad%e4%bf%a1%e6%9c%8d%e5%8a%a1%e4%bd%bf%e7%94%a8&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;接下来,我们使用短信验证码功能来演示短信服务的使用。流程如下:&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;截屏2021-08-29 下午1.04.52&#34; src=&#34;https://img.maruifu.com/images/2021/08/29/2021-08-29-1.04.52.png&#34;&gt;

  
    &lt;figcaption&gt;截屏2021-08-29 下午1.04.52&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;准备工作 
    &lt;div id=&#34;准备工作&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;

&lt;h4 class=&#34;relative group&#34;&gt;实名认证 
    &lt;div id=&#34;实名认证&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%ae%9e%e5%90%8d%e8%ae%a4%e8%af%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h4&gt;
&lt;p&gt;&lt;a
  href=&#34;https://help.aliyun.com/document&#34;
    target=&#34;_blank&#34;
  &gt;https://help.aliyun.com/document&lt;/a&gt;_detail/48263.html?spm=5176.11533457.J_1089570.9.15da5333ZUkUdR&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于JDK源码：我想聊聊如何更高效地阅读</title>
      <link>http://localhost:1313/posts/post-299/</link>
      <pubDate>Mon, 22 Mar 2021 01:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-299/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;为什么要看JDK源码 
    &lt;div id=&#34;为什么要看jdk源码&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%9c%8bjdk%e6%ba%90%e7%a0%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;一，JDK源码是其它所有源码的&lt;strong&gt;基础&lt;/strong&gt;，看懂了JDK源码再看其它的源码会达到事半功倍的效果。&lt;/p&gt;
&lt;p&gt;二，JDK源码中包含大量的&lt;strong&gt;数据结构&lt;/strong&gt;知识，是学习数据结构很好的资料，比如，链表、队列、散列表、红黑树、跳表、桶、堆、双端队列等。&lt;/p&gt;
&lt;p&gt;三、JDK源码中包含大量的&lt;strong&gt;设计模式&lt;/strong&gt;，是学习设计模式很好的资料，比如，适配器模式、模板方法模式、装饰器模式、迭代器模式、代理模式、工厂模式、命令模式、状态模式等。&lt;/p&gt;
&lt;p&gt;三，JDK源码中包含大量Java的&lt;strong&gt;高阶知识&lt;/strong&gt;，比如弱引用、Unsafe、CAS、锁原理、伪共享等，不看源码是很难学会这些知识的。&lt;/p&gt;
&lt;p&gt;四，面试时更好地&lt;strong&gt;收割offer&lt;/strong&gt;，这可能是很多同学最初的想法，其实真正看多了源码，这一点可能并不是太重要了，因为你会发现更广阔的世界。&lt;/p&gt;
&lt;p&gt;五，我认为最重要的，阅读源码是对思维的一种锻炼，是学习优秀设计的&lt;strong&gt;最佳途径&lt;/strong&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;JDK源码的阅读顺序 
    &lt;div id=&#34;jdk源码的阅读顺序&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#jdk%e6%ba%90%e7%a0%81%e7%9a%84%e9%98%85%e8%af%bb%e9%a1%ba%e5%ba%8f&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;JDK 中的代码非常多，不可能、也没必要全部读完，因此要有的放矢。从整体上来讲，我分成了以下几个部分：&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;基础类 
    &lt;div id=&#34;基础类&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e7%b1%bb&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基础类&lt;/strong&gt;，是指组成JDK源码地基的一部分类。&lt;/p&gt;
&lt;p&gt;比如包装类、反射类、工具类等，这些类有个共同点，就是代码逻辑相对简单，不存在数据结构、复杂运算等问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于基础类&lt;/strong&gt;，我的建议是自己从头到尾浏览一遍，对于看不懂的地方可以写测试用例或者上网查查资料。比如，Integer里面有个IntegerCache内部类你可能不知道干嘛的，这时候光看代码是没用的，只能上网查查资料了，也不能盲目地死磕。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;简单集合 
    &lt;div id=&#34;简单集合&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e7%ae%80%e5%8d%95%e9%9b%86%e5%90%88&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;简单集合&lt;/strong&gt;，是指不存在多线程安全问题的集合。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>各种乱码原因及示例</title>
      <link>http://localhost:1313/posts/post-324/</link>
      <pubDate>Tue, 07 Jul 2020 15:13:11 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-324/</guid>
      <description>&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;alt&#34; src=&#34;https://img.maruifu.com/images/blog/2020/07/6t23tcmheognaqnkgclma9sjr9.png&#34;&gt;

  
    &lt;figcaption&gt;alt&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Java 通过反射动态执行方法</title>
      <link>http://localhost:1313/posts/post-325/</link>
      <pubDate>Tue, 07 Jul 2020 15:08:41 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-325/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
    public static void main(String[] args) throws  Exception{




        Class clazz = Class.forName(&amp;#34;com.mantis.hc.sale.dto.response.ExamAssistCustomerQueryRespDTO&amp;#34;);
        Class clazz1 = ExamAssistCustomerQueryRespDTO.class;

        ExamAssistCustomerQueryRespDTO examAssistCustomerQueryRespDTO = new ExamAssistCustomerQueryRespDTO();
        examAssistCustomerQueryRespDTO.setAccount(&amp;#34;qweqweqweqweqw&amp;#34;);
         String  attachmenturl = (String) clazz.getMethod(&amp;#34;getAccount&amp;#34;).invoke(examAssistCustomerQueryRespDTO);//执行方法
        String  attachmenturl1 = (String) clazz1.getMethod(&amp;#34;getAccount&amp;#34;).invoke(examAssistCustomerQueryRespDTO);//执行方法

        System.out.println(attachmenturl);
        System.out.println(attachmenturl1);

    }
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Java 修改文件名</title>
      <link>http://localhost:1313/posts/post-328/</link>
      <pubDate>Tue, 07 Jul 2020 15:00:13 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-328/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        public static void main(String[] args) throws Exception {



            String  oldPath =  &amp;#34;/Users/admin/test/jmeter/123.log&amp;#34;;
            String  newPath =  &amp;#34;/Users/admin/test/jmeter/123/qweqweqweq.log&amp;#34;;

            //创建指定的路径
            File directory = new File(newPath);
            //获取文件夹 路径
            String courseFile = directory.getParent();
            File file = new File(courseFile );//
            if(!file.exists()){//如果文件夹不存在
                file.mkdir();//创建文件夹
            }
            File oldFile = new File(oldPath );
            File newFile = new File(newPath );
            //重命名
            System.out.println(oldFile.renameTo(newFile));
            
          
        }
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Java 服务线上问题排查思路与工具使用</title>
      <link>http://localhost:1313/posts/post-344/</link>
      <pubDate>Sat, 31 Aug 2019 15:08:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-344/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;前言 
    &lt;div id=&#34;前言&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Java 语言是当前互联网应用最为广泛的语言，作为一名 Java 程序猿，当业务相对比较稳定之后平常工作除了 coding 之外，大部分时间（70%~80%）是会用来排查突发或者周期性的线上问题。由于业务应用 bug（本身或引入第三方库）、内外部环境、底层硬件问题等原因，Java线上服务出现故障/问题几乎不可避免。例如，常见的现象包括部分请求超时、用户明显感受到系统发生卡顿等等。&lt;/p&gt;
&lt;p&gt;尽管线上问题从系统表象来看非常明显，但排查深究其发生的原因还是比较困难的，因此对开发测试或者是运维的同学产生了许多的困扰。排查定位线上问题是具有一定技巧或者说是经验规律的，排查者如果对业务系统了解得越深入，那么相对来说定位也会容易一些。&lt;/p&gt;
&lt;p&gt;不管怎么说，掌握 Java 服务线上问题排查思路并能够熟练排查问题常用工具/命令/平台是每一个 Java 程序猿进阶必须掌握的实战技能。笔者依据自己的 工作经验总结出一套基本的线上问题排查流程，同学们可以根据自己的实际工作情况进行归纳总结。&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Java 服务常见线上问题 
    &lt;div id=&#34;java-服务常见线上问题&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#java-%e6%9c%8d%e5%8a%a1%e5%b8%b8%e8%a7%81%e7%ba%bf%e4%b8%8a%e9%97%ae%e9%a2%98&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;所有 Java 服务的线上问题从系统表象来看归结起来总共有四方面：CPU、内存、磁盘、网络。例如 CPU 使用率峰值突然飚高、内存溢出(泄露)、磁盘满了、网络流量异常、FullGC 等等问题。基于这些现象我们可以将线上问题分成两大类: 系统异常、业务服务异常。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;系统异常 
    &lt;div id=&#34;系统异常&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e5%bc%82%e5%b8%b8&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;常见的系统异常现象包括: CPU 占用率过高、CPU上下文切换频率次数较高、磁盘满了、磁盘 I/O 过于频繁、网络流量异常（连接数过多）、系统可用内存长期处于较低值（导致 oom killer）等等。这些问题可以通过 top（cpu）、free（内存）、df（磁盘）、dstat（网络流量）、pstack、vmstat、strace（底层系统调用）等工具获取系统异常现象数据。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>今天遇到的一个奇葩的NoClassFound的问题</title>
      <link>http://localhost:1313/other/post-355/</link>
      <pubDate>Mon, 03 Sep 2018 02:34:44 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-355/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;with root cause java.lang.NoClassDefFoundError&lt;/p&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;nohup的日志中报错&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.NoClassDefFoundError: org/apache/catalina/core/ApplicationContext$DispatchData

2018-09-01 20:21:55.017 |-ERROR [http-nio-28082-exec-9] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [181] -| Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/trace/WebRequestTraceFilter$CustomStatusResponseWrapper
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后居然是因为该jar是root用户启动的, 而Jenkins上使用的是rc用户,Jenkins部署的时候无法通过rc将该进程杀死.但是有的接口是OK的,有的接口就会报上面的问题&lt;/p&gt;
&lt;p&gt;将该进程杀死,用Jenkins启动后,一切正常.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>对list中的对象属性排序</title>
      <link>http://localhost:1313/other/post-357/</link>
      <pubDate>Wed, 18 Jul 2018 11:53:00 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-357/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/%E6%8E%92%E5%BA%8F&#34;&gt;排序&lt;/a&gt;&lt;/p&gt;

&lt;h1 class=&#34;relative group&#34;&gt;对list中的对象属性排序 
    &lt;div id=&#34;对list中的对象属性排序&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%af%b9list%e4%b8%ad%e7%9a%84%e5%af%b9%e8%b1%a1%e5%b1%9e%e6%80%a7%e6%8e%92%e5%ba%8f&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;今天遇到一个排序问题觉得挺值得分享的，一个集合，集合存储着若干对象，对象有若干属性，希望按照对象的某个属性排序，排序完成，list的存储顺序也是按照这个属性排完以后的顺序。&lt;/p&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getUsername&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUsername&lt;/span&gt;(String username) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setAge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListSortTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String args&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; userlist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    User user1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    User user2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    User user3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    User user4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; User();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    user1.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAge&lt;/span&gt;(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    userlist.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(user1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    user2.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAge&lt;/span&gt;(34);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    userlist.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(user2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    user3.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAge&lt;/span&gt;(19);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    userlist.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(user3);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    user4.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAge&lt;/span&gt;(6);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    userlist.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(user4);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;排序前&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(User user:userlist){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(user.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;排序后&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(User user:getSortList(userlist)){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(user.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getSortList&lt;/span&gt;(List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    Collections.&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(list, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Comparator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compare&lt;/span&gt;(User o1, User o2) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(o1.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;o2.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;()){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(o1.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;o2.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAge&lt;/span&gt;()){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果：&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Java并发问题总结</title>
      <link>http://localhost:1313/other/post-358/</link>
      <pubDate>Tue, 17 Apr 2018 07:14:00 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-358/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Java并发问题总结!&lt;/p&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Java内存模型 
    &lt;div id=&#34;java内存模型&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;所有变量都存储在主内存中。这里的主内存只是虚拟机内存的一部分，可以和物理主内存类比。每条线程都有自己的工作内存。工作内存可以和处理器高速缓存类比。工作内存中保存了主内存中变量的拷贝，线程所有的操作只能在工作内存中进行，不同线程不能访问对方的工作内存，只能通过更新到主内存中的方式来传递线程间的变量值。&lt;/p&gt;
&lt;p&gt;主内存与工作内存间的交互操作都具有原子性，包括&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;&#34; src=&#34;https://img.maruifu.com/images/blog/blogimg/bingfayuanxixingcaozuo.png&#34;&gt;

  
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中read和load之间，store和write之间必须按顺序执行，但是不要求连续执行，即中间可以插入其他指令。&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;并发的三个问题 
    &lt;div id=&#34;并发的三个问题&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%b9%b6%e5%8f%91%e7%9a%84%e4%b8%89%e4%b8%aa%e9%97%ae%e9%a2%98&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;

&lt;h3 class=&#34;relative group&#34;&gt;原子性 
    &lt;div id=&#34;原子性&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%8e%9f%e5%ad%90%e6%80%a7&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;指的是不能被线程调度机制中断的操作，它会在上下文切换之前执行完毕。由于read，load，store，write，use，assign都能够保证原子性，故对一个基本类型变量的访问和赋值可以看作原子操作。对于synchronized块之间的操作也具有原子性。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;x = 1; // 具有原子性
y = x; // 2个指令，use了x的值，再assign到y
x++; // 4个指令，use了x的值，生成常数1，x加1，再assign到x
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&#34;relative group&#34;&gt;可见性 
    &lt;div id=&#34;可见性&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%8f%af%e8%a7%81%e6%80%a7&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;指的是当一个线程修改了共享变量值，其他线程能够立即得知这个修改。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>HashMap底层实现详解</title>
      <link>http://localhost:1313/other/post-359/</link>
      <pubDate>Tue, 17 Apr 2018 06:57:00 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-359/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前段时间面试 无论是58,还是京东 还是阿里 都问了Map的底层实现,小马哥又仔细看了看源码!&lt;/p&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;

&lt;h2 class=&#34;relative group&#34;&gt;HashMap概述： 
    &lt;div id=&#34;hashmap概述&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#hashmap%e6%a6%82%e8%bf%b0&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;　　HashMap是基于哈希表的Map接口的非同步实现（Hashtable跟HashMap很像，唯一的区别是Hashtalbe中的方法是线程安全的，也就是同步的）。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;HashMap的数据结构： 
    &lt;div id=&#34;hashmap的数据结构&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#hashmap%e7%9a%84%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;　　在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表的数组”的数据结构，每个元素存放链表头结点的数组，即数组和链表的结合体。&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;map底层数据结构&#34; src=&#34;https://img.maruifu.com/images/blog/blogimg/hashmapdicengshgixin.jpg&#34;&gt;

  
    &lt;figcaption&gt;map底层数据结构&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从上图中可以看出，HashMap底层就是一个数组，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。源码如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
/** 
 * The table, resized as necessary. Length MUST Always be a power of two. 
 */  
transient Entry[] table;  
  
static class Entry&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; {  
    final K key;  
    V value;  
    Entry&amp;lt;K,V&amp;gt; next;  
    final int hash;  
    ……  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看出，Entry就是数组中的元素，每个Map.Entry就是一个key-value对，它持有一个指向下一个元素的引用，这就构成了链表。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>String转换成Integer源码分析</title>
      <link>http://localhost:1313/posts/post-360/</link>
      <pubDate>Thu, 22 Mar 2018 08:29:26 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-360/</guid>
      <description>&lt;p&gt;我们经常为用到Integer.valueOf(String str)这个方法,如果字符串格式不对,这个方法会抛出一个系统异常NumberFormatException 这里我们就要分析一下这个方法,其中Byte,Short也是调用了Ingeter中的方法. 在Integer类中的定义如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static Integer valueOf(String s) throws NumberFormatException
    {
 return new Integer(parseInt(s, 10));
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里因为parseInt方法返回的int型的,这里调用了一个构造函数产生了一个新的Integer实例. 这里关心的是parseInt方法,该方法代码如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static int parseInt(String s, int radix)
  throws NumberFormatException
    {
        if (s == null) {
            throw new NumberFormatException(&amp;#34;null&amp;#34;);
        }

 if (radix &amp;lt; Character.MIN_RADIX) {
     throw new NumberFormatException(&amp;#34;radix &amp;#34; + radix +
         &amp;#34; less than Character.MIN_RADIX&amp;#34;);
 }

 if (radix &amp;gt; Character.MAX_RADIX) {
     throw new NumberFormatException(&amp;#34;radix &amp;#34; + radix +
         &amp;#34; greater than Character.MAX_RADIX&amp;#34;);
 }

 int result = 0;
 boolean negative = false;
 int i = 0, max = s.length();
 int limit;
 int multmin;
 int digit;

 if (max &amp;gt; 0) {
     if (s.charAt(0) == &amp;#39;-&amp;#39;) {
  negative = true;
  limit = Integer.MIN_VALUE;
  i++;
     } else {
  limit = -Integer.MAX_VALUE;
     }

     if (i &amp;lt; max) {
  digit = Character.digit(s.charAt(i++),radix);
  if (digit &amp;lt; 0) {
      throw NumberFormatException.forInputString(s);
  } else {
      result = -digit;
  }
     }
     while (i &amp;lt; max) {
  // Accumulating negatively avoids surprises near MAX_VALUE
  digit = Character.digit(s.charAt(i++),radix);
  if (digit &amp;lt; 0) {
      throw NumberFormatException.forInputString(s); 
  }
  if (result &amp;lt; multmin) {
      throw NumberFormatException.forInputString(s);  异常1
  }
  result *= radix;
  if (result &amp;lt; limit + digit) {
      throw NumberFormatException.forInputString(s);  异常2
  }
  result -= digit;
     }
 } else {
     throw NumberFormatException.forInputString(s);
 }

 if (negative) {
     if (i &amp;gt; 1) {
  return result;
     } else { /* Only got &amp;#34;-&amp;#34; */
  throw NumberFormatException.forInputString(s);
     }
 } else {
     return -result;
 }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很显然,该方法的第二个参数表示是基数(最常用的是十进制,还有十六机制,八进制等等).&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>阅读源码的三种境界</title>
      <link>http://localhost:1313/other/post-362/</link>
      <pubDate>Thu, 15 Mar 2018 02:15:17 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-362/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;没有经验的技术差底子薄的初级程序员，如何阅读项目源码？ &amp;quot;&lt;/p&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&amp;ldquo;有人阅读过 mybatis 的源码吗 ？就看一个初始化过程就看的已经头晕眼花了，小伙伴们支支招吧！&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;源码应该怎么阅读，我曾经尝试阅读一些源码，例如alibaba的druid中sqlparser部分，spring-mvc，但是发现很吃力，都说debug是最好的阅读方式，我在debug时经常有跟丢的现象……就是走着走着感觉好像进入了一些我当前不太关注细枝末节。 &amp;quot; 。。。。。。&lt;/p&gt;
&lt;p&gt;估计很多人都有这样的疑惑。&lt;/p&gt;
&lt;p&gt;我非常能理解小伙伴们的痛苦，因为我也是这么痛苦着走过来的。&lt;/p&gt;
&lt;p&gt;阅读优秀源码的好处想必大家都知道，学习别人优秀的设计，合理的抽象，简洁的代码&amp;hellip;&amp;hellip; 总之是好处多多。&lt;/p&gt;
&lt;p&gt;但是真的把庞大的代码放到你的面前，就如同一个巨大的迷宫，要在其中东转西转寻出一条路来，把迷宫的整个结构搞清楚，理解核心思想，真心不容易。&lt;/p&gt;
&lt;p&gt;在阅读由面向对象的语言如Java写的代码时，会发现接口和具体的实现经常对应不起来，不太清楚一个功能到底是怎么在哪个实现类中才能找到。 不像C语言，就是函数调用函数，相对还好点。&lt;/p&gt;
&lt;p&gt;如果是动态语言如Ruby,Python， 一个变量的类型甚至都不容易知道，阅读的难度大大增加。&lt;/p&gt;
&lt;p&gt;还有一个重要的原因，现在我们看到的源码基本上都经过若干年发展、经过很多人不断地完善的，枝枝蔓蔓非常多，魔鬼都在细节中。 阅读的时候很容易陷进去， 看了几十层函数调用以后，就彻底懵了，就放弃了： 甭管你把源码吹得天花乱坠， 老子再也不看了。&lt;/p&gt;
&lt;p&gt;经过很多痛苦的挣扎以后，我也算有一些成功的经历，今天用治学的三个境界来类比， 给大家分享一下：&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;昨夜西风凋碧树，独上高楼，望尽天涯路 
    &lt;div id=&#34;昨夜西风凋碧树独上高楼望尽天涯路&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%98%a8%e5%a4%9c%e8%a5%bf%e9%a3%8e%e5%87%8b%e7%a2%a7%e6%a0%91%e7%8b%ac%e4%b8%8a%e9%ab%98%e6%a5%bc%e6%9c%9b%e5%b0%bd%e5%a4%a9%e6%b6%af%e8%b7%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;想把源码搞懂，吃透，首先得登高望远，瞰察路径，明确目标与方向，了解源码的概貌。&lt;/p&gt;
&lt;p&gt;所以有些准备工作必须得做。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;阅读源码之前，需要有一定的技术储备。 
    &lt;div id=&#34;阅读源码之前需要有一定的技术储备&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e9%98%85%e8%af%bb%e6%ba%90%e7%a0%81%e4%b9%8b%e5%89%8d%e9%9c%80%e8%a6%81%e6%9c%89%e4%b8%80%e5%ae%9a%e7%9a%84%e6%8a%80%e6%9c%af%e5%82%a8%e5%a4%87&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;比如设计模式，在很多Java源码中几乎就是标配，尤其是这几个：模板方法，单例，观察者，工厂方法，代理，策略，装饰者。&lt;/p&gt;
&lt;p&gt;再比如阅读Spring源码，肯定得先了解IoC是怎么回事，AOP的实现方式，CGLib，Java动态代理等，自己动手，写点相关的代码，把这些知识点掌握了。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;必须得会使用这个框架/类库， 最好是精通各种各样的用法。 
    &lt;div id=&#34;必须得会使用这个框架类库-最好是精通各种各样的用法&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%bf%85%e9%a1%bb%e5%be%97%e4%bc%9a%e4%bd%bf%e7%94%a8%e8%bf%99%e4%b8%aa%e6%a1%86%e6%9e%b6%e7%b1%bb%e5%ba%93-%e6%9c%80%e5%a5%bd%e6%98%af%e7%b2%be%e9%80%9a%e5%90%84%e7%a7%8d%e5%90%84%e6%a0%b7%e7%9a%84%e7%94%a8%e6%b3%95&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;上面刚提过，魔鬼都在细节中，如果有些用法根本不知道，可能你能看明白代码是什么意思，但是不知道它为什么这些写。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>如何设计出高可用、高性能的接口</title>
      <link>http://localhost:1313/other/post-377/</link>
      <pubDate>Tue, 28 Nov 2017 02:29:00 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-377/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;接口设计怎么样才能高可用,高性能?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;

&lt;h2 class=&#34;relative group&#34;&gt;接口设计需要考虑哪些方面 
    &lt;div id=&#34;接口设计需要考虑哪些方面&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%8e%a5%e5%8f%a3%e8%ae%be%e8%ae%a1%e9%9c%80%e8%a6%81%e8%80%83%e8%99%91%e5%93%aa%e4%ba%9b%e6%96%b9%e9%9d%a2&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;接口的命名。&lt;/li&gt;
&lt;li&gt;请求参数。&lt;/li&gt;
&lt;li&gt;支持的协议。&lt;/li&gt;
&lt;li&gt;TPS、并发数、响应时长。&lt;/li&gt;
&lt;li&gt;是否需要白名单。&lt;/li&gt;
&lt;li&gt;数据存储。DB选型、缓存选型。&lt;/li&gt;
&lt;li&gt;是否需要依赖于第三方。&lt;/li&gt;
&lt;li&gt;接口是否拆分。&lt;/li&gt;
&lt;li&gt;接口是否需要幂等。&lt;/li&gt;
&lt;li&gt;防刷。&lt;/li&gt;
&lt;li&gt;接口限流、降级。&lt;/li&gt;
&lt;li&gt;负载均衡器支持。&lt;/li&gt;
&lt;li&gt;如何部署。&lt;/li&gt;
&lt;li&gt;是否需要服务治理。&lt;/li&gt;
&lt;li&gt;是否存在单点。&lt;/li&gt;
&lt;li&gt;接口是否资源包、预加载还是内置。&lt;/li&gt;
&lt;li&gt;是否需要本地缓存。&lt;/li&gt;
&lt;li&gt;是否需要分布式缓存、缓存穿透怎么办。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们设计接口，我们或多或少都会有上面列举的一些考虑，我们只有想的更多才能让让我们的接口更加完善，我个人觉得100%完美的接口是不存在，只有适合才是最重要。&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;接口设计原则 
    &lt;div id=&#34;接口设计原则&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%8e%a5%e5%8f%a3%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;原则一：必须符合Restful，统一返回格式，约定业务层错误编码，每个编码可以携带可选的错误信息。&lt;/p&gt;
&lt;p&gt;原则二： 命名必须规范、优雅。&lt;/p&gt;
&lt;p&gt;原则三：单一性。&lt;/p&gt;
&lt;p&gt;单一性是指接口要做的事情应该是一个比较单一的事情，比如登陆接口，登陆完成应该只是返回登陆成功以后一些用户信息即可，但很多人为了减少接口交互，返回一大堆额外的数据。比如有人设计一个用户列表接口，接口他返回每一条数据都是包含用户了一大堆跟另外无关的数据，结果一问，原来其他无关的数据是他下一步想要获取的，想达成数据的懒加载&lt;/p&gt;
&lt;p&gt;原则四：可扩展。&lt;/p&gt;
&lt;p&gt;接口扩展性，是指设计接口的时候多想想多种情况，多考虑各个方面，其实我觉得单独将扩展性放在这里也是不妥的，感觉说的跟单一性有点相反的意思，其实这个不是这个意思，这边的扩展性是指我们的接口充分考虑客户端，想想他们是如何调用的，他要怎样使用我的代码，他会如何扩展我的代码，不要把过多的工作写在你的接口里面，而应该把更多的主动权交给客户程序员。如获取不同的列表数据接口，我们不可能将每个列表都写成一个接口。 还有一点，我这里特别想指出来的是很多开发人员为了省事（姑且只能这么理解），将接口设计当成只是app页面展示，这些人将一个页面展示就用一个接口实现，而不考虑这些数据是不是属于不同的模块、是不是属于不同的展示范畴、结果下次视觉一改，整个接口又得重写，不能复用。&lt;/p&gt;
&lt;p&gt;原则五：必须有文档。&lt;/p&gt;
&lt;p&gt;良好的接口设计，离不开清晰的接口文档表述。文档表述一定要足够详细&lt;/p&gt;
&lt;p&gt;原则六：产品心。&lt;/p&gt;
&lt;p&gt;为什么我说要有产品心？因为我觉得很多人忽略了这一点。我来说一下假如开发一个app，如果一开始连个交互文档给你都没有的话，你怎么设计接口？所以我觉得作为一个服务端后台开发人员应该要有产品心，特别是对于交互文档应该好好理解，因为这些都会对我们的接口设计有很大的影响，我在设计接口的时候就很常发现很多交互文档根本就走不通，产品没有考虑到位，交互文档缺失，这时候作为一个开发要主动推动，完善。&lt;/p&gt;
&lt;p&gt;原则七：第三方服务接口数据能缓存就缓存。&lt;/p&gt;
&lt;p&gt;原则八：第三方服务需要做降级。&lt;/p&gt;
&lt;p&gt;原则九：建议消除单点。&lt;/p&gt;
&lt;p&gt;原则十：接口粒度要小。&lt;/p&gt;
&lt;p&gt;原则十一：客户端能处理的逻辑就不要给服务端处理，减少服务端压力。&lt;/p&gt;
&lt;p&gt;原则十二：资源预加载。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>wget下载JDK</title>
      <link>http://localhost:1313/posts/post-379/</link>
      <pubDate>Thu, 16 Nov 2017 11:25:17 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-379/</guid>
      <description>&lt;p&gt;大家都知道jdk无法直接通过wget下载。原来需要cookie，如下：&lt;/p&gt;
&lt;p&gt;一、下载&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget --no-check-certificate --no-cookie --header &amp;#34;Cookie: oraclelicense=accept-securebackup-cookie;&amp;#34; http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm
sudo rpm -ivh jdk-7u79-linux-x64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在下载的要求又有所变化，用原来的方式已经不行了。是动态的生成一个参数。&lt;/p&gt;
&lt;p&gt;解决办法： 在chrome下，打开开发者工具（本人用的mac版本），点击所需要下载的包，看console-&amp;gt;logs会看到一行字：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Resource interpreted as Document but transferred with MIME type application/x-redhat-package-manager: &amp;#34;http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm?AuthParam=1461049990_341c3c217ccd4554c0a065149ff156c8&amp;#34;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;，于是，直接使用这个就好了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget -O jdk-7u80-linux-x64.rpm http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm?AuthParam=1461049990_341c3c217ccd4554c0a065149ff156c8  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;64位&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget --no-cookies --no-check-certificate --header &amp;#34;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&amp;#34; &amp;#34;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;32位&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget --no-cookies --no-check-certificate --header &amp;#34;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&amp;#34; &amp;#34;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-i586.tar.gz&amp;#34;
tar xzf jdk-8u141-linux-i586.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar xzf jdk-8u141-linux-x64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JAVA_HOME=/usr/local/java/jdk1.8/
JRE_HOME=/usr/local/java/jdk1.8/jre
CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
export JAVA_HOME JRE_HOME CLASS_PATH PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了让环境变量即时生效，输入 &lt;code&gt;source /etc/profile&lt;/code&gt; 即可。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>SpringBoot系列</title>
      <link>http://localhost:1313/other/post-383/</link>
      <pubDate>Fri, 10 Nov 2017 07:57:27 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-383/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;

&lt;h2 class=&#34;relative group&#34;&gt;SpringBoot系列-1入门 
    &lt;div id=&#34;springboot系列-1入门&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#springboot%e7%b3%bb%e5%88%97-1%e5%85%a5%e9%97%a8&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;

&lt;h3 class=&#34;relative group&#34;&gt;相关介绍 
    &lt;div id=&#34;相关介绍&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e7%9b%b8%e5%85%b3%e4%bb%8b%e7%bb%8d&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;官网:&lt;a
  href=&#34;https://projects.spring.io/spring-boot&#34;title=&#34;https://projects.spring.io/spring-boot&#34;
    target=&#34;_blank&#34;
  &gt;https://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方应用： SpringBoot-&amp;gt;SpringCloud&amp;gt;微服务&lt;/p&gt;
&lt;p&gt;Spring Boot不是一门新技术。从本质上来说，Spring Boot就是Spring,它做了那些没有它你也会去做的Spring Bean配置。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速运行起来。使用Spring Boot很容易创建一个独立运行（运行jar,内嵌Servlet容器）、准生产级别的基于Spring框架的项目，使用Spring Boot基本上可以不用或者只需要很少的Spring配置&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;&#34; src=&#34;https://img.maruifu.com/images/blog/blogimg/SpringBoot1.png&#34;&gt;

  
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;SpringBoot精要 
    &lt;div id=&#34;springboot精要&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#springboot%e7%b2%be%e8%a6%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;SpringBoot是伴随着Spring4.0诞生的&lt;/p&gt;
&lt;p&gt;SpringBoot帮助开发者快速启动一个Web容器&lt;/p&gt;
&lt;p&gt;SpringBoot继承了原有Spring框架的优秀基因&lt;/p&gt;
&lt;p&gt;SpringBoot简化了使用Spring的过程 






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;&#34; src=&#34;https://img.maruifu.com/images/blog/blogimg/SpringBoot2.png&#34;&gt;

  
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置&lt;/p&gt;
&lt;p&gt;起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>JDK自带工具之概览</title>
      <link>http://localhost:1313/other/post-384/</link>
      <pubDate>Tue, 07 Nov 2017 12:40:58 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-384/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在我们平常对java程序进行问题排查、性能调优时，如果没有合适的工具，很多时候会事倍功半，甚至无法继续进行下去。其实，jdk自身已经提供了很多强大的工具供我们使用。本文就对这些工具做一个概览性的描述&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;小马哥的JDK版本是&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\XiaoMage&amp;gt;java -version
  java version &amp;#34;1.8.0_91&amp;#34;
  Java(TM) SE Runtime Environment (build 1.8.0_91-b15)
  Java HotSpot(TM) 64-Bit Server VM (build 25.91-b15, mixed mode)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JAVA_HOME/bin下的工具有&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; C:\Program Files\Java\jdk1.8.0_91\bin 的目录

[.]                  jconsole.exe         klist.exe
[..]                 jdb.exe              ktab.exe
appletviewer.exe     jdeps.exe            msvcr100.dll
extcheck.exe         jhat.exe             native2ascii.exe
idlj.exe             jinfo.exe            orbd.exe
jabswitch.exe        jjs.exe              pack200.exe
jar.exe              jli.dll              policytool.exe
jarsigner.exe        jmap.exe             rmic.exe
java-rmi.exe         jmc.exe              rmid.exe
java.exe             jmc.ini              rmiregistry.exe
javac.exe            jps.exe              schemagen.exe
javadoc.exe          jrunscript.exe       serialver.exe
javafxpackager.exe   jsadebugd.exe        servertool.exe
javah.exe            jstack.exe           tnameserv.exe
javap.exe            jstat.exe            unpack200.exe
javapackager.exe     jstatd.exe           wsgen.exe
javaw.exe            jvisualvm.exe        wsimport.exe
javaws.exe           keytool.exe          xjc.exe
jcmd.exe             kinit.exe
              54 个文件      3,432,305 字节
               2 个目录 39,509,975,040 可用字节
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;序号&lt;/th&gt;
          &lt;th&gt;工具名称&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;appletviewer.exe&lt;/td&gt;
          &lt;td&gt;用于运行并浏览applet小程序。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;apt.exe&lt;/td&gt;
          &lt;td&gt;注解处理工具(Annotation Processing Tool)，主要用于注解处理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;extcheck.exe&lt;/td&gt;
          &lt;td&gt;扩展检测工具，主要用于检测指定jar文件与当前已安装的Java SDK扩展之间是否存在版本冲突。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;idlj.exe&lt;/td&gt;
          &lt;td&gt;IDL转Java编译器(IDL-to-Java Compiler)，用于为指定的IDL文件生成Java绑定。IDL意即接口定义语言(Interface Definition Language)。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;jabswitch.exe&lt;/td&gt;
          &lt;td&gt;Java访问桥开关(Java Access Bridge switch)，用于启用/禁用Java访问桥。Java访问桥内置于Java 7 Update 6及以上版本，主要为Windows系统平台提供一套访问Java应用的API。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;jar.exe&lt;/td&gt;
          &lt;td&gt;jar文件管理工具，主要用于打包压缩、解压jar文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;jarsigner.exe&lt;/td&gt;
          &lt;td&gt;jar密匙签名工具。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;java.exe&lt;/td&gt;
          &lt;td&gt;Java运行工具，用于运行.class字节码文件或.jar文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;javac.exe&lt;/td&gt;
          &lt;td&gt;Java编译工具(Java Compiler)，用于编译Java源代码文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;javadoc.exe&lt;/td&gt;
          &lt;td&gt;Java文档工具，主要用于根据Java源代码中的注释信息生成HTML格式的API帮助文档。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;11&lt;/td&gt;
          &lt;td&gt;javafxpackager.exe&lt;/td&gt;
          &lt;td&gt;JavaFX包装器，用于执行与封装或签名JavaFX应用有关的任务。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;12&lt;/td&gt;
          &lt;td&gt;javah.exe&lt;/td&gt;
          &lt;td&gt;Java头文件工具，用于根据Java类生成C/C++头文件和源文件(主要用于JNI开发领域)。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;13&lt;/td&gt;
          &lt;td&gt;javap.exe&lt;/td&gt;
          &lt;td&gt;Java反编译工具，主要用于根据Java字节码文件反汇编为Java源代码文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;14&lt;/td&gt;
          &lt;td&gt;java-rmi.exe&lt;/td&gt;
          &lt;td&gt;Java远程方法调用(Java Remote Method Invocation)工具，主要用于在客户机上调用远程服务器上的对象。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;15&lt;/td&gt;
          &lt;td&gt;javaw.exe&lt;/td&gt;
          &lt;td&gt;Java运行工具，用于运行.class字节码文件或.jar文件，但不会显示控制台输出信息，适用于运行图形化程序。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;16&lt;/td&gt;
          &lt;td&gt;javaws.exe&lt;/td&gt;
          &lt;td&gt;Java Web Start，使您可以从Web下载和运行Java应用程序，下载、安装、运行、更新Java应用程序都非常简单方便。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;jcmd.exe&lt;/td&gt;
          &lt;td&gt;Java 命令行(Java Command)，用于向正在运行的JVM发送诊断命令请求。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;18&lt;/td&gt;
          &lt;td&gt;jconsole.exe&lt;/td&gt;
          &lt;td&gt;图形化用户界面的监测工具，主要用于监测并显示运行于Java平台上的应用程序的性能和资源占用等信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;19&lt;/td&gt;
          &lt;td&gt;jdb.exe&lt;/td&gt;
          &lt;td&gt;Java调试工具(Java Debugger)，主要用于对Java应用进行断点调试。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;jhat.exe&lt;/td&gt;
          &lt;td&gt;Java堆分析工具(Java Heap Analysis Tool)，用于分析Java堆内存中的对象信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;21&lt;/td&gt;
          &lt;td&gt;jinfo.exe&lt;/td&gt;
          &lt;td&gt;Java配置信息工具(Java Configuration Information)，用于打印指定Java进程、核心文件或远程调试服务器的配置信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;22&lt;/td&gt;
          &lt;td&gt;jmap.exe&lt;/td&gt;
          &lt;td&gt;Java内存映射工具(Java Memory Map)，主要用于打印指定Java进程、核心文件或远程调试服务器的共享对象内存映射或堆内存细节。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;23&lt;/td&gt;
          &lt;td&gt;jmc.exe&lt;/td&gt;
          &lt;td&gt;Java任务控制工具(Java Mission Control)，主要用于HotSpot JVM的生产时间监测、分析、诊断。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;24&lt;/td&gt;
          &lt;td&gt;jps.exe&lt;/td&gt;
          &lt;td&gt;JVM进程状态工具(JVM Process Status Tool)，用于显示目标系统上的HotSpot JVM的Java进程信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;25&lt;/td&gt;
          &lt;td&gt;jrunscript.exe&lt;/td&gt;
          &lt;td&gt;Java命令行脚本外壳工具(command line script shell)，主要用于解释执行javascript、groovy、ruby等脚本语言。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;26&lt;/td&gt;
          &lt;td&gt;jsadebugd.exe&lt;/td&gt;
          &lt;td&gt;Java可用性代理调试守护进程(Java Serviceability Agent Debug Daemon)，主要用于附加到指定的Java进程、核心文件，或充当一个调试服务器。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;27&lt;/td&gt;
          &lt;td&gt;jstack.exe&lt;/td&gt;
          &lt;td&gt;Java堆栈跟踪工具，主要用于打印指定Java进程、核心文件或远程调试服务器的Java线程的堆栈跟踪信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;28&lt;/td&gt;
          &lt;td&gt;jstat.exe&lt;/td&gt;
          &lt;td&gt;JVM统计监测工具(JVM Statistics Monitoring Tool)，主要用于监测并显示JVM的性能统计信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;29&lt;/td&gt;
          &lt;td&gt;jstatd.exe&lt;/td&gt;
          &lt;td&gt;jstatd(VM jstatd Daemon)工具是一个RMI服务器应用，用于监测HotSpot JVM的创建和终止，并提供一个接口，允许远程监测工具附加到运行于本地主机的JVM上。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;30&lt;/td&gt;
          &lt;td&gt;jvisualvm.exe&lt;/td&gt;
          &lt;td&gt;JVM监测、故障排除、分析工具，主要以图形化界面的方式提供运行于指定虚拟机的Java应用程序的详细信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;31&lt;/td&gt;
          &lt;td&gt;keytool.exe&lt;/td&gt;
          &lt;td&gt;密钥和证书管理工具，主要用于密钥和证书的创建、修改、删除等。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;kinit.exe&lt;/td&gt;
          &lt;td&gt;主要用于获取或缓存Kerberos协议的票据授权票据。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;33&lt;/td&gt;
          &lt;td&gt;klist.exe&lt;/td&gt;
          &lt;td&gt;允许用户查看本地凭据缓存和密钥表中的条目(用于Kerberos协议)。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;34&lt;/td&gt;
          &lt;td&gt;ktab.exe&lt;/td&gt;
          &lt;td&gt;Kerberos密钥表管理工具，允许用户管理存储于本地密钥表中的主要名称和服务密钥。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;35&lt;/td&gt;
          &lt;td&gt;native2ascii.exe&lt;/td&gt;
          &lt;td&gt;本地编码到ASCII编码的转换器(Native-to-ASCII Converter)，用于&amp;quot;任意受支持的字符编码&amp;quot;和与之对应的&amp;quot;ASCII编码和(或)Unicode转义&amp;quot;之间的相互转换。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;36&lt;/td&gt;
          &lt;td&gt;orbd.exe&lt;/td&gt;
          &lt;td&gt;对象请求代理守护进程(Object Request Broker Daemon)，它使客户端能够透明地定位和调用位于CORBA环境的服务器上的持久对象。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;37&lt;/td&gt;
          &lt;td&gt;pack200.exe&lt;/td&gt;
          &lt;td&gt;JAR文件打包压缩工具，它可以利用Java类特有的结构，对普通JAR文件进行高效压缩，以便于能够更快地进行网络传输。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;38&lt;/td&gt;
          &lt;td&gt;packager.exe&lt;/td&gt;
          &lt;td&gt;这是微软提供的对象包装程序，用于对象安装包。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;39&lt;/td&gt;
          &lt;td&gt;policytool.exe&lt;/td&gt;
          &lt;td&gt;策略工具，用于管理用户策略文件(.java.policy)。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;40&lt;/td&gt;
          &lt;td&gt;rmic.exe&lt;/td&gt;
          &lt;td&gt;Java RMI 编译器，为使用JRMP或IIOP协议的远程对象生成stub、skeleton、和tie类，也用于生成OMG IDL。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;41&lt;/td&gt;
          &lt;td&gt;rmid.exe&lt;/td&gt;
          &lt;td&gt;Java RMI 激活系统守护进程，rmid启动激活系统守护进程，允许在虚拟机中注册或激活对象。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;42&lt;/td&gt;
          &lt;td&gt;rmiregistry.exe&lt;/td&gt;
          &lt;td&gt;Java 远程对象注册表，用于在当前主机的指定端口上创建并启动一个远程对象注册表。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;43&lt;/td&gt;
          &lt;td&gt;schemagen.exe&lt;/td&gt;
          &lt;td&gt;XML schema生成器，用于生成XML schema文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;44&lt;/td&gt;
          &lt;td&gt;serialver.exe&lt;/td&gt;
          &lt;td&gt;序列版本命令，用于生成并返回serialVersionUID。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;45&lt;/td&gt;
          &lt;td&gt;servertool.exe&lt;/td&gt;
          &lt;td&gt;Java IDL 服务器工具，用于注册、取消注册、启动和终止持久化的服务器。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;46&lt;/td&gt;
          &lt;td&gt;tnameserv.exe&lt;/td&gt;
          &lt;td&gt;Java IDL瞬时命名服务。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;47&lt;/td&gt;
          &lt;td&gt;unpack200.exe&lt;/td&gt;
          &lt;td&gt;JAR文件解压工具，将一个由pack200打包的文件解压提取为JAR文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;48&lt;/td&gt;
          &lt;td&gt;wsgen.exe&lt;/td&gt;
          &lt;td&gt;XML Web Service 2.0的Java API，生成用于JAX-WS Web Service的JAX-WS便携式产物。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;49&lt;/td&gt;
          &lt;td&gt;wsimport.exe&lt;/td&gt;
          &lt;td&gt;XML Web Service 2.0的Java API，主要用于根据服务端发布的wsdl文件生成客户端存根及框架&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;50&lt;/td&gt;
          &lt;td&gt;xjc.exe&lt;/td&gt;
          &lt;td&gt;主要用于根据XML schema文件生成对应的Java类。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比较常用的是：&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[译]Java中9个处理Exception的最佳实践</title>
      <link>http://localhost:1313/other/post-385/</link>
      <pubDate>Tue, 07 Nov 2017 11:10:54 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-385/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在Java中处理异常并不是一个简单的事情。不仅仅初学者很难理解，即使一些有经验的开发者也需要花费很多时间来思考如何处理异常，包括需要处理哪些异常，怎样处理等等。这也是绝大多数开发团队都会制定一些规则来规范对异常的处理的原因。而团队之间的这些规范往往是截然不同的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文给出几个被很多团队使用的异常处理最佳实践。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;在Finally块中清理资源 
    &lt;div id=&#34;在finally块中清理资源&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%9c%a8finally%e5%9d%97%e4%b8%ad%e6%b8%85%e7%90%86%e8%b5%84%e6%ba%90&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;当使用类似InputStream这种需要使用后关闭的资源时，一个常见的错误就是在try块的最后关闭资源。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public void doNotCloseResourceInTry() {
    FileInputStream inputStream = null;
    try {
        File file = new File(&amp;#34;./tmp.txt&amp;#34;);
        inputStream = new FileInputStream(file);
        // use the inputStream to read a file
        // do NOT do this
        inputStream.close();
    } catch (FileNotFoundException e) {
        log.error(e);
    } catch (IOException e) {
        log.error(e);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码在没有任何exception的时候运行是没有问题的。但是当try块中的语句抛出异常或者自己实现的代码抛出异常，那么就不会执行最后的关闭语句，从而资源也无法释放。&lt;/p&gt;
&lt;p&gt;合理的做法则是将所有清理的代码都放到finally块中或者使用try-with-resource语句。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public void closeResourceInFinally() {
    FileInputStream inputStream = null;
    try {
        File file = new File(&amp;#34;./tmp.txt&amp;#34;);
        inputStream = new FileInputStream(file);
        // use the inputStream to read a file
    } catch (FileNotFoundException e) {
        log.error(e);
    } finally {
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException e) {
                log.error(e);
            }
        }
    }
}

public void automaticallyCloseResource() {
    File file = new File(&amp;#34;./tmp.txt&amp;#34;);
    try (FileInputStream inputStream = new FileInputStream(file);) {
        // use the inputStream to read a file
    } catch (FileNotFoundException e) {
        log.error(e);
    } catch (IOException e) {
        log.error(e);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&#34;relative group&#34;&gt;指定具体的异常 
    &lt;div id=&#34;指定具体的异常&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%8c%87%e5%ae%9a%e5%85%b7%e4%bd%93%e7%9a%84%e5%bc%82%e5%b8%b8&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;尽可能的使用最具体的异常来声明方法，这样才能使得代码更容易理解。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Java 8教程</title>
      <link>http://localhost:1313/other/post-392/</link>
      <pubDate>Fri, 27 Oct 2017 01:45:22 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-392/</guid>
      <description>&lt;h3 class=&#34;relative group&#34;&gt;Java 8 - 简介 
    &lt;div id=&#34;java-8---简介&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#java-8---%e7%ae%80%e4%bb%8b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 8于2014年初发布。在java 8中，大多数关于功能的是lambda表达式。它还有许多其他重要功能，如默认方法，Streams API和新的日期/时间API。让我们在java 8中了解这些新功能的例子。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;xxx&#34; src=&#34;https://img.maruifu.com/images/blog/2017/10/q35qfr5p5gj1fpr0v84vm5r8an.jpg&#34;&gt;

  
&lt;/figure&gt;
&lt;/p&gt;

&lt;h4 class=&#34;relative group&#34;&gt;Lambda表达 
    &lt;div id=&#34;lambda表达&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#lambda%e8%a1%a8%e8%be%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h4&gt;
&lt;p&gt;我们许多已经使用高级语言（如Scala）的人们并不知道Lambda表达式。在编程中，Lambda表达式（或函数）只是一个匿名函数，即一个没有名称而不被绑定到一个标识符的函数。它们被完全写在需要的地方，通常作为其他功能的参数。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;lambda表达式的基本语法是：&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;either
(parameters) -&amp;gt; expression
or
(parameters) -&amp;gt; { statements; }
or
() -&amp;gt; expression
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;典型的lambda表达式示例将如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(x, y) -&amp;gt; x + y  //This function takes two parameters and return their sum.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，根据x和y的类型，方法可能会在多个地方使用。参数可以匹配int，或整数或简单的字符串。基于上下文，它将添加两个整数或两个字符串。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Java 8 Lambda 表达式</title>
      <link>http://localhost:1313/other/post-397/</link>
      <pubDate>Wed, 25 Oct 2017 00:06:10 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-397/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。 使用 Lambda 表达式可以使代码变的更加简洁紧凑。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;

&lt;h3 class=&#34;relative group&#34;&gt;语法 
    &lt;div id=&#34;语法&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e8%af%ad%e6%b3%95&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;lambda 表达式的语法格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(parameters) -&amp;gt; expression
或
(parameters) -&amp;gt;{ statements; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下是lambda表达式的重要特征:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选的大括号：如果主体包含了一个语句，就不需要使用大括号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 class=&#34;relative group&#34;&gt;Lambda 表达式实例 
    &lt;div id=&#34;lambda-表达式实例&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#lambda-%e8%a1%a8%e8%be%be%e5%bc%8f%e5%ae%9e%e4%be%8b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;在 Java8Tester.java 文件输入以下代码： Java8Tester.java 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Java8Tester&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String args&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Java8Tester tester &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Java8Tester();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 类型声明&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MathOperation addition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 不用类型声明&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MathOperation subtraction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 大括号中的返回语句&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MathOperation multiplication &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 没有大括号及返回语句&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MathOperation division &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10 + 5 = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tester.&lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(10, 5, addition));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10 - 5 = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tester.&lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(10, 5, subtraction));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10 x 5 = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tester.&lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(10, 5, multiplication));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10 / 5 = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tester.&lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(10, 5, division));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 不用括号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GreetingService greetService1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 用括号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GreetingService greetService2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (message) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      greetService1.&lt;span style=&#34;color:#a6e22e&#34;&gt;sayMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Runoob&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      greetService2.&lt;span style=&#34;color:#a6e22e&#34;&gt;sayMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Google&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MathOperation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreetingService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sayMessage&lt;/span&gt;(String message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, MathOperation mathOperation){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mathOperation.&lt;span style=&#34;color:#a6e22e&#34;&gt;operation&lt;/span&gt;(a, b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行以上脚本，输出结果为：&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Java内部类的使用小结</title>
      <link>http://localhost:1313/other/post-398/</link>
      <pubDate>Thu, 12 Oct 2017 00:46:47 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-398/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;成员内部类 
    &lt;div id=&#34;成员内部类&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%88%90%e5%91%98%e5%86%85%e9%83%a8%e7%b1%bb&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;成员内部类，就是作为外部类的成员，可以直接使用外部类的所有成员和方法，即使是private的。同时外部类要访问内部类的所有成员变量/方法，则需要通过内部类的对象来获取。 要注意的是，成员内部类不能含有static的变量和方法。因为成员内部类需要先创建了外部类，才能创建它自己的，了解这一点，就可以明白更多事情，在此省略更多的细节了。 在成员内部类要引用外部类对象时，使用outer.this来表示外部类对象； 而需要创建内部类对象，可以使用outer.inner obj = outerobj.new inner();&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Outer { 
		public static void main(String[] args) { 
			Outer outer = new Outer(); 
			Outer.Inner inner = outer.new Inner(); 
			inner.print(&amp;#34;Outer.new&amp;#34;); 
			 
			inner = outer.getInner(); 
			inner.print(&amp;#34;Outer.get&amp;#34;); 
		} 
		 
		//个人推荐使用getxxx()来获取成员内部类，尤其是该内部类的构造函数无参数时 
		public Inner getInner() { 
			return new Inner(); 
		} 
		 
		public class Inner { 
			public void print(String str) { 
				System.out.println(str); 
			} 
		} 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&#34;relative group&#34;&gt;局部内部类 
    &lt;div id=&#34;局部内部类&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%b1%80%e9%83%a8%e5%86%85%e9%83%a8%e7%b1%bb&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;局部内部类，是指内部类定义在方法和作用域内。Thinking in Java给了这么两个例子： 定义在方法内：&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Java匿名内部类</title>
      <link>http://localhost:1313/other/post-399/</link>
      <pubDate>Thu, 12 Oct 2017 00:06:50 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-399/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名内部类也就是没有名字的内部类&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写&lt;/p&gt;
&lt;p&gt;但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;实例1:不使用匿名内部类来实现抽象方法 
    &lt;div id=&#34;实例1不使用匿名内部类来实现抽象方法&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%ae%9e%e4%be%8b1%e4%b8%8d%e4%bd%bf%e7%94%a8%e5%8c%bf%e5%90%8d%e5%86%85%e9%83%a8%e7%b1%bb%e6%9d%a5%e5%ae%9e%e7%8e%b0%e6%8a%bd%e8%b1%a1%e6%96%b9%e6%b3%95&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;abstract class Person {
	public abstract void eat();
}

class Child extends Person {
	public void eat() {
		System.out.println(&amp;#34;eat something&amp;#34;);
	}
}

public class Demo {
	public static void main(String[] args) {
		Person p = new Child();
		p.eat();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果：eat something&lt;/p&gt;
&lt;p&gt;可以看到，我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用&lt;/p&gt;
&lt;p&gt;但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦？&lt;/p&gt;
&lt;p&gt;这个时候就引入了匿名内部类&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;实例2：匿名内部类的基本实现 
    &lt;div id=&#34;实例2匿名内部类的基本实现&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%ae%9e%e4%be%8b2%e5%8c%bf%e5%90%8d%e5%86%85%e9%83%a8%e7%b1%bb%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%ae%9e%e7%8e%b0&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;abstract class Person {
	public abstract void eat();
}

public class Demo {
	public static void main(String[] args) {
		Person p = new Person() {
			public void eat() {
				System.out.println(&amp;#34;eat something&amp;#34;);
			}
		};
		p.eat();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果：eat something&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>厌倦了空指针异常？考虑使用Java SE 8的Optional！</title>
      <link>http://localhost:1313/other/post-400/</link>
      <pubDate>Wed, 11 Oct 2017 04:52:58 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-400/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;使您的代码更可读，并保护它免受空指针异常。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;

&lt;h3 class=&#34;relative group&#34;&gt;说明 
    &lt;div id=&#34;说明&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e8%af%b4%e6%98%8e&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;一个聪明的人曾经表示，在处理空指针异常之前，你不是一个真正的Java程序员。开玩笑，空引用是许多问题的根源，因为它通常用于表示没有值。Java SE 8引入了一个新的类java.util.Optional，可以减轻其中的一些问题。&lt;/p&gt;
&lt;p&gt;我们从一个例子开始，看到null的危险。我们来看一个嵌套的对象结构Computer，如图1所示。&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;&#34; src=&#34;http://www.oracle.com/ocom/groups/public/@otn/documents/digitalasset/2175761.gif&#34;&gt;

  
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图1：用于表示a的嵌套结构 Computer&lt;/p&gt;
&lt;p&gt;以下代码可能有问题吗？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; computer.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSoundcard&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getUSB&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getVersion&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码看起来很合理。然而，许多计算机（例如，Raspberry Pi）实际上并不附带声卡。那么结果是getSoundcard()什么呢？&lt;/p&gt;
&lt;p&gt;一个常见的（bad）做法是返回null引用以指示没有声卡。不幸的是，这意味着调用getUSB()将尝试返回一个空引用的USB端口，这将导致NullPointerException运行时，并阻止程序进一步运行。想象一下，如果您的程序在客户的机器上运行; 如果程序突然失败，您的客户会说什么？ 为了给出一些历史背景，计算机科学巨人托尼·霍尔（Tony Hoare）写道：“我称之为我十亿美元的错误，这是1965年发明的无效参考。我无法抗拒放弃的诱惑一个null引用，只是因为它很容易实现。“&lt;/p&gt;
&lt;p&gt;你可以做什么来防止意外的空指针异常？您可以防御并添加检查以防止取消引用，如下列代码所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UNKNOWN&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(computer &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Soundcard soundcard &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; computer.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSoundcard&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(soundcard &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    USB usb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soundcard.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUSB&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(usb &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; usb.&lt;span style=&#34;color:#a6e22e&#34;&gt;getVersion&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，由于嵌套检查，您可以看到清单1中的代码很难变得非常难看。不幸的是，我们需要很多样板代码，以确保我们没有得到NullPointerException。此外，这些检查妨碍了业务逻辑，这是令人讨厌的。实际上，它们正在减少我们的程序的整体可读性。&lt;/p&gt;
&lt;p&gt;此外，这是一个容易出错的过程; 如果你忘记检查一个属性可能是null怎么办？我将在本文中讨论使用null表示缺少值是错误的方法。我们需要的是更好地模拟一个价值的缺失和存在。&lt;/p&gt;
&lt;p&gt;为了给出一些上下文，我们来简要介绍一下其他的编程语言。&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;没有什么替代品？ 
    &lt;div id=&#34;没有什么替代品&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%b2%a1%e6%9c%89%e4%bb%80%e4%b9%88%e6%9b%bf%e4%bb%a3%e5%93%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;诸如Groovy之类的语言具有由“ ” 表示的安全导航操作，?.用于安全浏览潜在的空引用。（请注意，它很快被包含在C＃中，并且被提出用于Java SE 7，但没有将其纳入该版本。）它的工作原理如下： 诸如Groovy之类的语言具有由“ ” 表示的安全导航操作，?.用于安全浏览潜在的空引用。（请注意，它很快被包含在C＃中，并且被提出用于Java SE 7，但没有将其纳入该版本。）它的工作原理如下：&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
