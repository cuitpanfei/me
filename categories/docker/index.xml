<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on CUITPF</title>
    <link>http://localhost:1313/categories/docker/</link>
    <description>Recent content in Docker on CUITPF</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2025 </copyright>
    <lastBuildDate>Wed, 02 Jun 2021 16:11:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kubernetes简介和安装</title>
      <link>http://localhost:1313/posts/post-289/</link>
      <pubDate>Wed, 02 Jun 2021 16:11:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-289/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/Kubernetes&#34;&gt;Kubernetes&lt;/a&gt;&lt;a
  href=&#34;http://localhost:1313/tag/docker&#34;&gt;docker&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is Kubernetes？&lt;/p&gt;
&lt;p&gt;Kubernetes这个单词来自于希腊语，含义是 舵手 或 领航员&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 class=&#34;relative group&#34;&gt;简介说明 
    &lt;div id=&#34;简介说明&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e7%ae%80%e4%bb%8b%e8%af%b4%e6%98%8e&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Production-Grade Container Orchestration Automated container deployment, scaling, and management&lt;/p&gt;
&lt;p&gt;生产级的容器编排 自动化的容器部署、扩展和管理&lt;/p&gt;
&lt;p&gt;Kubernetes，也称为K8S，其中8是代表中间“ubernete”的8个字符，是Google在2014年开源的一个容器编排引擎，用于自动化容器化应用程序的部署、规划、扩展和管理，它将组成应用程序的容器分组为逻辑单元，以便于管理和发现，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效，很多细节都不需要运维人员去进行复杂的手工配置和处理；&lt;/p&gt;
&lt;p&gt;Kubernetes拥有Google在生产环境上15年运行的经验，并结合了社区中最佳实践；&lt;/p&gt;
&lt;p&gt;K8S是 &lt;a
  href=&#34;https://cncf.io/&#34;
    target=&#34;_blank&#34;
  &gt;CNCF&lt;/a&gt; 毕业的项目，本来Kubernetes是Google的内部项目，后来开源出来，又后来为了其茁壮成长，捐给了CNCF；&lt;/p&gt;
&lt;p&gt;CNCF全称Cloud Native Computing Foundation（云原生计算基金会）&lt;/p&gt;
&lt;p&gt;官网：https://kubernetes.io/&lt;/p&gt;
&lt;p&gt;代码：https://github.com/kubernetes/kubernetes&lt;/p&gt;
&lt;p&gt;Kubernetes是采用Go语言开发的，Go语言是谷歌2009发布的一款开源编程语言；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编排是什么意思？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按照一定的目的依次排列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调配、安排；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;

&lt;h2 class=&#34;relative group&#34;&gt;整体架构 
    &lt;div id=&#34;整体架构&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%95%b4%e4%bd%93%e6%9e%b6%e6%9e%84&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;截屏2021-06-02 下午11.40.05&#34; src=&#34;https://img.maruifu.com/images/2021/06/02/2021-06-02-11.40.05.png&#34;&gt;

  
    &lt;figcaption&gt;截屏2021-06-02 下午11.40.05&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker-常用安装与镜像发布到阿里云（四）</title>
      <link>http://localhost:1313/posts/post-291/</link>
      <pubDate>Sun, 16 May 2021 11:45:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-291/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/Docker&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Docker常用安装 
    &lt;div id=&#34;docker常用安装&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#docker%e5%b8%b8%e7%94%a8%e5%ae%89%e8%a3%85&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;

&lt;h3 class=&#34;relative group&#34;&gt;总体步骤 
    &lt;div id=&#34;总体步骤&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%80%bb%e4%bd%93%e6%ad%a5%e9%aa%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;搜索镜像-&amp;gt;拉取镜像-&amp;gt;查看镜像-&amp;gt;启动镜像-&amp;gt;停止容器-&amp;gt;移除容器&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;安装tomcat 
    &lt;div id=&#34;安装tomcat&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%ae%89%e8%a3%85tomcat&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;1.docker hub上面查找tomcat镜像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker search tomcat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.从docker hub上拉取tomcat镜像到本地&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker pull tomcat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;官网命令：&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;image-20210516183353962&#34; src=&#34;https://img.maruifu.com/images/2021/05/16/image-20210516183353962.png&#34;&gt;

  
    &lt;figcaption&gt;image-20210516183353962&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;3.docker images查看是否有拉取到的tomcat&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;image-20210516183459819&#34; src=&#34;https://img.maruifu.com/images/2021/05/16/image-20210516183459819.png&#34;&gt;

  
    &lt;figcaption&gt;image-20210516183459819&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;4.使用tomcat镜像创建容器(也叫运行镜像)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -it -p 8080:8080 tomcat
#  -p 主机端口:docker容器端口
#  -P 随机分配端口
#  i:交互
#  t:终端
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;image-20210516183704111&#34; src=&#34;https://img.maruifu.com/images/2021/05/16/image-20210516183704111.png&#34;&gt;

  
    &lt;figcaption&gt;image-20210516183704111&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker-容器数据卷与DockerFile解析（三）</title>
      <link>http://localhost:1313/posts/post-292/</link>
      <pubDate>Sun, 16 May 2021 10:27:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-292/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/Docker&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Docker容器数据卷 
    &lt;div id=&#34;docker容器数据卷&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#docker%e5%ae%b9%e5%99%a8%e6%95%b0%e6%8d%ae%e5%8d%b7&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;

&lt;h3 class=&#34;relative group&#34;&gt;是什么？ 
    &lt;div id=&#34;是什么&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%98%af%e4%bb%80%e4%b9%88&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;先来看看Docker的理念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器之间希望有可能共享数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。&lt;/p&gt;
&lt;p&gt;为了能保存数据在docker中我们使用卷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一句话：有点类似我们Redis里面的rdb和aof文件&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 class=&#34;relative group&#34;&gt;能干嘛？ 
    &lt;div id=&#34;能干嘛&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e8%83%bd%e5%b9%b2%e5%98%9b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：&lt;/p&gt;
&lt;p&gt;卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据卷可在容器之间共享或重用数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷中的更改可以直接生效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据卷中的更改不会包含在镜像的更新中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据卷的生命周期一直持续到没有容器使用它为止&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器的持久化&lt;/p&gt;
&lt;p&gt;容器间继承+共享数据&lt;/p&gt;

&lt;h3 class=&#34;relative group&#34;&gt;数据卷 
    &lt;div id=&#34;数据卷&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%8d%b7&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;

&lt;h4 class=&#34;relative group&#34;&gt;容器内直接命令添加 
    &lt;div id=&#34;容器内直接命令添加&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%ae%b9%e5%99%a8%e5%86%85%e7%9b%b4%e6%8e%a5%e5%91%bd%e4%bb%a4%e6%b7%bb%e5%8a%a0&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker-命令与镜像（二）</title>
      <link>http://localhost:1313/posts/post-293/</link>
      <pubDate>Sun, 16 May 2021 09:07:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-293/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/Docker&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Docker常用命令 
    &lt;div id=&#34;docker常用命令&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#docker%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;

&lt;h3 class=&#34;relative group&#34;&gt;帮助命令 
    &lt;div id=&#34;帮助命令&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%b8%ae%e5%8a%a9%e5%91%bd%e4%bb%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker version
docker info
docker --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&#34;relative group&#34;&gt;镜像命令 
    &lt;div id=&#34;镜像命令&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e9%95%9c%e5%83%8f%e5%91%bd%e4%bb%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;列出本地主机上的镜像&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker images
#各个选项说明:
#    - REPOSITORY：表示镜像的仓库源
#    - TAG：镜像的标签
#    - IMAGE ID：镜像ID
#    - CREATED：镜像创建时间
#    - SIZE：镜像大小
#同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。
#如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像

#OPTIONS说明
#   - -a :列出本地所有的镜像（含中间映像层）
#   - -q :只显示镜像ID。
#   - --digests :显示镜像的摘要信息
#   - --no-trunc :显示完整的镜像信息
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker search 某个XXX镜像名字&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker-简介与安装（一）</title>
      <link>http://localhost:1313/posts/post-294/</link>
      <pubDate>Sun, 16 May 2021 08:23:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/post-294/</guid>
      <description>&lt;p&gt;&lt;a
  href=&#34;http://localhost:1313/tag/Docker&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;Docker简介 
    &lt;div id=&#34;docker简介&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#docker%e7%ae%80%e4%bb%8b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;

&lt;h3 class=&#34;relative group&#34;&gt;是什么？ 
    &lt;div id=&#34;是什么&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e6%98%af%e4%bb%80%e4%b9%88&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;

&lt;h4 class=&#34;relative group&#34;&gt;为什么会有docker？ 
    &lt;div id=&#34;为什么会有docker&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e6%9c%89docker&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h4&gt;
&lt;p&gt;一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验&lt;/p&gt;
&lt;p&gt;Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。&lt;/p&gt;
&lt;p&gt;环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;image-20210516150107135&#34; src=&#34;https://img.maruifu.com/images/2021/05/16/image-20210516150107135.png&#34;&gt;

  
    &lt;figcaption&gt;image-20210516150107135&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说吧，Java/Tomcat/MySQL/JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。&lt;/p&gt;
&lt;p&gt;传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。Docker镜像的设计，使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。&lt;/p&gt;

&lt;h4 class=&#34;relative group&#34;&gt;docker理念？ 
    &lt;div id=&#34;docker理念&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#docker%e7%90%86%e5%bf%b5&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h4&gt;
&lt;p&gt;Docker是基于Go语言实现的云开源项目。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
