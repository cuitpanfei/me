<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>版本控制 on CUITPF</title>
    <link>http://localhost:1313/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link>
    <description>Recent content in 版本控制 on CUITPF</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2025 </copyright>
    <lastBuildDate>Tue, 07 Nov 2017 09:08:26 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>从 Subversion 过渡到 Git</title>
      <link>http://localhost:1313/other/post-386/</link>
      <pubDate>Tue, 07 Nov 2017 09:08:26 +0000</pubDate>
      
      <guid>http://localhost:1313/other/post-386/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;目前，想从 Subversion 过渡到 Git 其实并不困难，只要你不把 Git 和 Subversion混淆就行。一旦你明白了两者在概念上的区别，这个改变的过程就会变得容易。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-来自小马哥的故事&lt;/p&gt;
&lt;hr&gt;

&lt;h2 class=&#34;relative group&#34;&gt;分布式与集中式 
    &lt;div id=&#34;分布式与集中式&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e4%b8%8e%e9%9b%86%e4%b8%ad%e5%bc%8f&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Subversion是一个集中式（centralized）的版本控制系统。所有的开发团队成员都工作在单一的远程中央仓库上，当在这个中央仓库上进行 “签出（checkout）” 操作时，它就会在你的本地计算机上设置一个 “工作副本（working copy）”。这就是一个存储在你本地计算机上的一个特定版本的快照。&lt;/p&gt;
&lt;p&gt;






&lt;figure&gt;
    &lt;img class=&#34;my-0 rounded-md&#34; loading=&#34;lazy&#34; alt=&#34;alt&#34; src=&#34;https://img.maruifu.com/images/blog/2017/11/ubav6eao3sh42o2hbq4hjgluug.png&#34;&gt;

  
    &lt;figcaption&gt;alt&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Git从 Subversion过渡到GitGit是一个分部式（distributed）的版本控制系统，它有着一个不同的工作方式。相对于Subversion 的 “签出（checkout）”，每一个Git用户会从远程仓库“克隆（clone）”出一个本地仓库。反过来说，一个用户会得到一个完整的仓库，而不仅仅只是一个工作副本。用户在本地计算机上拥有自己的仓库，并且包含所有的项目历史记录。用户可以在自己的本地计算机上做任何想要操作，例如提交（commit），历史检查（inspect history），恢复到一个旧的版本等等。只有当你想要共享你的工作结果时，你才需要连接到远程服务器上。&lt;/p&gt;

&lt;h2 class=&#34;relative group&#34;&gt;仓库结构和 URLs 
    &lt;div id=&#34;仓库结构和-urls&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#%e4%bb%93%e5%ba%93%e7%bb%93%e6%9e%84%e5%92%8c-urls&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;一个 Subversion 的仓库通常都是由几个目录组织起来的。“trunk” 目录对应你的开发主线，“branches” 目录对应那些特定的工作背景下的开发，而 “tags” 目录则用来标记一个特定的版本。它们都要通过自己的 URL 来指向到它在中央仓库中的具体位置：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;svn+ssh://svn@example.com/svn/trunkGit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;仓库就完全不一样了，它的组成完全就是一个在项目根目录下的 “.git” 文件夹。对分支和标记的查找完全依靠命令，而不是通过 URLs。Git 的 URL 只指向仓库的位置。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
